상속 : 부모클래스(super Class)로부터 모든 자원을 물려받는 개념
상속을 하려면 반드시 extends 키워드를 이용하여 상속 받을 부모 클래스를 지정하고 단, 한번에 하나의 클래스만 상속 받을 수 있다.
ex) public Class a{
	}
	public Class b{
	}
	public Class c extends a{//가능
	}
	public Class c extends a,c{//불가능
	}
	public Class d extends a{//가능
	}
	public Class e extends d{//상속의 상속도 가능하다.
	}

상속이 가능한 부모 클래스의 변수 및 메소드
1.부모와 자식이 같은 패키지에 존재 같은 패키지 일 경우
	public int a;
	char c;
	private이 붙은 메소드나 변수는 상속이 불가능
2. 부모와 자식이 다른 패키지에 존재 할 경우
	public int a;
	private이 붙은 메소드나 변수는 상속이 불가능
	아무것도 없는(default)메소드나 변수는 상속 불가능(데이터 앞에 아무 것도 없을 때를 디폴트상태라고 한다)
========================================================================================
접근 제한자(지정자) :  외부로부터 클래스자신을 보호하기 위해 접근을 제한하는 것
종류
1.public 	: 어디서든지 모두허용
2.protected : 상속되는 자식 클래스까지만 허용
3.default 	: 동일 패키지 내에서는 모두 허용
4.private  	: 본인 클래스 내에서만 사용 가능
접근 제한자는 클래스 선언, 메소드선언, 생성자 선언, 변수 선언시 사용가능.
단, 클래스 선언시 private은 사용 불가

========================================================================================
메소드 선언기법
1.overloading : 동일한 메소드 이름을 이용하여 다양한 데이터를 처리할 경우.
조건: 매개 변수의 갯수 또는 동일 갯수일 경우에는 데이터 타입이 달라야 한다.

예)	public void test(){
	}
	public void test(int a){
	}
	public void test(String s){
	}
	public void test(int a, int b){
	}
	public void test(int n){//불가능(매개변수 갯수와 데이터 타입이 동일)
	}
	
2.Override : 반드시 상속이 필요
부모로부터 물려받은 메서드를 자식 클래스에서 수정하여 사용할 경우
조건 : 물려받은 메서드의 {}내부만 수정가능
만약 메소드 선언부를 수정하면 자식클래스가 선언한 메소드로 변경
ex) public Class a{// 부모 클래스(superClass)
		public Class(){

		}
	}
	public void test(){// 부모 클래스(superClass)가 선언한 매소드
		syso(10+30);
	}
	////////////////////////////////////
	public Class b extends a{// 자식 클래스
		public b(){

		}
	}
	public void test(){// 부모 클래스(superClass) a로 부터 물려받은 메소드
		int a  = 10+30+50;//수정내용
		syso(a);//수정내용
	}
	///////////////////////////////////////
	public Class c extends a{// 자식 클래스
		public c(){

		}
	}
	public int test(){//이 메소드는 선언부를 수정하였기 때문에
		return 100;//a클래스가 아닌 c클래스 선언 메소드
	}
	////////////////////////////////////////
	public Class d extends a{// 자식 클래스
		public d(){

		}
	}
	public int test(int n){//이 메서드는 선언부를 수정하였기 때문에 (매개 변수 추가)
		syso(n);//a클래스가 아닌 d클래스 선언 메소드
	}
	=====================================================================
	클래스 종류
	1. 메인 클래스 :  public static void main(String[] args) {}를 포함하고 있어야 함
					main() 메소드는 프로젝트의 메인 스레드(프로세스개념)으로 사용 된다.
					프로젝트 내에는 단 1개만 존재 한다.
	2. 일반 클래스 :	  public static void main(String[] args) {}를 포함하지 않음
					단 생성자가 필요
					
	3. 파생 클래스 : super class에 의해서 선언된 클래서(부모 클래스를 상속 받는 자식 클래스)
	4. 추상 클래스 :  abstract 키워드를 이용하여 선언
					public abstract Class test{
					}
	5. 인터페이스 클래스 :interface 키워드를 이용하여 선언  
						public interface Test{
						}
			